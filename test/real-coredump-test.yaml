apiVersion: v1  
kind: Pod
metadata:
  name: real-coredump-test
  labels:
    app.kubernetes.io/name: milvus
    app.kubernetes.io/instance: real-test
spec:
  containers:
  - name: milvus-crasher
    image: ubuntu:20.04
    command: ["/bin/bash", "-c"]
    args:
      - |
        echo "=== Real Milvus Coredump Test ==="
        
        # Install tools
        apt-get update && apt-get install -y gcc gdb
        
        # Set unlimited core dump
        ulimit -c unlimited
        echo "Core dump limit: $(ulimit -c)"
        
        # Ensure coredump directory exists and is writable
        mkdir -p /var/lib/systemd/coredump
        chmod 755 /var/lib/systemd/coredump
        
        # Check and potentially modify core pattern
        echo "Current core pattern: $(cat /proc/sys/kernel/core_pattern)"
        
        # Create a milvus-like crasher
        cat > /tmp/milvus_crasher.c << 'EOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <unistd.h>
        #include <string.h>
        #include <signal.h>
        #include <sys/resource.h>
        
        void print_info() {
            printf("=== Milvus Crasher ===\n");
            printf("PID: %d\n", getpid());
            printf("PPID: %d\n", getppid());
            
            struct rlimit rlim;
            if (getrlimit(RLIMIT_CORE, &rlim) == 0) {
                printf("Core dump limit: ");
                if (rlim.rlim_cur == RLIM_INFINITY) {
                    printf("unlimited\n");
                } else {
                    printf("%lu bytes\n", rlim.rlim_cur);
                }
            }
        }
        
        // Simulate some milvus-like operations
        void simulate_milvus_work() {
            printf("Simulating Milvus database operations...\n");
            
            // Allocate some memory
            char *data = malloc(1024 * 1024);  // 1MB
            if (data) {
                memset(data, 0x42, 1024 * 1024);
                printf("Allocated and initialized 1MB memory\n");
            }
            
            // Simulate some work
            for (int i = 0; i < 100; i++) {
                usleep(10000);  // 10ms
                if (i % 20 == 0) {
                    printf("Processing batch %d...\n", i);
                }
            }
            
            free(data);
        }
        
        int main() {
            print_info();
            
            printf("Starting Milvus-like process...\n");
            simulate_milvus_work();
            
            printf("Will crash with SIGSEGV in 3 seconds...\n");
            fflush(stdout);
            sleep(3);
            
            printf("Triggering segmentation fault...\n");
            fflush(stdout);
            
            // Make sure SIGSEGV is not caught
            signal(SIGSEGV, SIG_DFL);
            
            // Create segmentation fault
            volatile int *null_ptr = NULL;
            *null_ptr = 0xDEADBEEF;
            
            // Should not reach here
            printf("ERROR: Crash did not occur!\n");
            return 1;
        }
        EOF
        
        # Compile with debug symbols
        gcc -g -O0 -o /tmp/milvus_crasher /tmp/milvus_crasher.c
        
        # Change to the coredump directory to ensure core files are created there
        cd /var/lib/systemd/coredump
        
        echo "Starting milvus crasher..."
        /tmp/milvus_crasher
        
        # Should not reach here
        echo "ERROR: Program returned normally"
        sleep 30
    securityContext:
      privileged: true
    volumeMounts:
    - name: coredump-vol
      mountPath: /var/lib/systemd/coredump
    resources:
      limits:
        memory: "512Mi"
        cpu: "200m"
  restartPolicy: Always
  volumes:
  - name: coredump-vol
    hostPath:
      path: /var/lib/systemd/coredump
      type: DirectoryOrCreate